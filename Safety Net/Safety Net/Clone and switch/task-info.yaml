type: edu
files:
  - name: src/Main.java
    visible: true
    text: |-
      package safetynet;
      
      // Do not delete or change this file.
      // Clone the repository inside the project root.
      // Fulfill the objectives and press the `Check` button.
      
      public class Main {
          public static void main(String[] args) {
              //
          }
      }
    learner_created: false
  - name: test/Tests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.eclipse.jgit.api.Git;
      import org.eclipse.jgit.api.errors.GitAPIException;
      import org.eclipse.jgit.lib.Repository;
      import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
      
      import java.io.File;
      import java.io.IOException;
      import java.nio.file.Path;
      import java.nio.file.Paths;
      import java.util.List;
      import java.util.stream.Collectors;
      
      public class Tests extends StageTest {
      
          private static final Path ROOT = Paths.get("").toAbsolutePath().getParent().getParent();
          private static final Path repoPath = ROOT.resolve("Safety-net-study-repository");
      
          private Repository repository;
      
          @DynamicTest
          CheckResult test1() {
              // Test if the path is a valid git repository
              File gitDir = new File(repoPath.toFile(), ".git");
              if (!gitDir.exists()) {
                  return CheckResult.wrong("The expected path '" + repoPath + "' does not exist or is not a valid git repository!");
              }
      
              try {
                  FileRepositoryBuilder builder = new FileRepositoryBuilder();
                  repository = builder.setGitDir(gitDir)
                          .readEnvironment()
                          .findGitDir()
                          .build();
      
              } catch (IOException e) {
                  return CheckResult.wrong("The path '" + repoPath + "' does not exist or is not a valid git repository!");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test2() {
              // Test if all branches exist in the local repository
              try (Git git = new Git(repository)) {
                  List<String> branchList = List.of("0.2.x-dev", "main");
      
                  // Fetch the list of branch names, stripping any "refs/heads/" prefix
                  List<String> branches = git.branchList().call().stream()
                          .map(ref -> ref.getName().replace("refs/heads/", ""))
                          .collect(Collectors.toList());
      
                  // Check if each required branch exists in the local repository
                  for (String branch : branchList) {
                      if (!branches.contains(branch)) {
                          return CheckResult.wrong(branch + " is missing!");
                      }
                  }
              } catch (GitAPIException e) {
                  return CheckResult.wrong("Error occurred while reading branches: " + e.getMessage());
              }
      
              return CheckResult.correct();
          }
      
      
          @DynamicTest
          CheckResult test3() {
              // Test if the active branch is '0.2.x-dev'
              String activeBranch = "0.2.x-dev";
              try (Git git = new Git(repository)) {
                  String currentBranch = repository.getBranch();
                  if (!currentBranch.equals(activeBranch)) {
                      return CheckResult.wrong("Active branch is not '" + activeBranch + "'!");
                  }
              } catch (IOException e) {
                  return CheckResult.wrong("Error occurred while reading the active branch: " + e.getMessage());
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/51225#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #3

    Active branch is not &#39;0.2.x-dev&#39;!
  time: "Thu, 05 Dec 2024 23:14:52 UTC"
record: 1
